// Mocks generated by Mockito 5.4.5 from annotations
// in snap_jp_learn_app/test/services/sync_engine_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:snap_jp_learn_app/models/post.dart' as _i4;
import 'package:snap_jp_learn_app/services/sync_api_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SyncApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncApiService extends _i1.Mock implements _i2.SyncApiService {
  MockSyncApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> pingServer() => (super.noSuchMethod(
        Invocation.method(
          #pingServer,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i4.Post>> pullPosts() => (super.noSuchMethod(
        Invocation.method(
          #pullPosts,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Post>>.value(<_i4.Post>[]),
      ) as _i3.Future<List<_i4.Post>>);

  @override
  _i3.Future<void> pushPosts(List<_i4.Post>? posts) => (super.noSuchMethod(
        Invocation.method(
          #pushPosts,
          [posts],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> isConnected() => (super.noSuchMethod(
        Invocation.method(
          #isConnected,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
